{"ast":null,"code":"var _jsxFileName = \"/Users/ericawang/Downloads/MobileApp-F24/Week_6/Notes/comp-lib-start/src/components/Dropdown.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = props => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    options\n  } = props;\n  const handleClick = () => {\n    //technically, we should be using functional updates for state\n    //setIsOpen((currentIsOpen) => !currentIsOpen)\n    // but this also works and you'll see this in examples a lot as well\n    setIsOpen(!isOpen);\n  };\n  const handleOptionClick = option => {\n    setIsOpen(false);\n  };\n  const renderedOptions = options.map(option => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleClick,\n      children: \" Select...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderedOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(Dropdown, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Dropdown","props","_s","isOpen","setIsOpen","options","handleClick","handleOptionClick","option","renderedOptions","map","children","label","value","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ericawang/Downloads/MobileApp-F24/Week_6/Notes/comp-lib-start/src/components/Dropdown.js"],"sourcesContent":["import {useState} from 'react'\nconst Dropdown = (props) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const {options} = props\n\n  const handleClick = () => {\n    //technically, we should be using functional updates for state\n    //setIsOpen((currentIsOpen) => !currentIsOpen)\n    // but this also works and you'll see this in examples a lot as well\n    setIsOpen(!isOpen)\n  }\n\n  const handleOptionClick = (option)=>{\n    setIsOpen(false)\n  }\n\n  const renderedOptions = options.map((option) => {\n    return <div key = {option.value}>{option.label}</div>\n  })\n\n  return (\n    <div>\n      <div onClick= {handleClick}> Select...</div>\n      {isOpen && <div>{renderedOptions}</div>}\n    </div>\n  )\n}\n\nexport default Dropdown\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC9B,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM;IAACQ;EAAO,CAAC,GAAGJ,KAAK;EAEvB,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;IACA;IACAF,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMI,iBAAiB,GAAIC,MAAM,IAAG;IAClCJ,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,MAAMK,eAAe,GAAGJ,OAAO,CAACK,GAAG,CAAEF,MAAM,IAAK;IAC9C,oBAAOT,OAAA;MAAAY,QAAA,EAA2BH,MAAM,CAACI;IAAK,GAA3BJ,MAAM,CAACK,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CAAC;EACvD,CAAC,CAAC;EAEF,oBACElB,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAKmB,OAAO,EAAGZ,WAAY;MAAAK,QAAA,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC3Cd,MAAM,iBAAIJ,OAAA;MAAAY,QAAA,EAAMF;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV,CAAC;AAAAf,EAAA,CAzBKF,QAAQ;AAAAmB,EAAA,GAARnB,QAAQ;AA2Bd,eAAeA,QAAQ;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}